import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkinter.scrolledtext import ScrolledText


class TextEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("Text Editor")
        self.root.geometry("800x600")

        # Create menu bar
        self.menu_bar = tk.Menu(self.root)
        self.root.config(menu=self.menu_bar)

        # File menu
        self.file_menu = tk.Menu(self.menu_bar, tearoff=False)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)
        self.file_menu.add_command(label="New", accelerator="Ctrl+N", command=self.new_file)
        self.file_menu.add_command(label="Open", accelerator="Ctrl+O", command=self.open_file)
        self.file_menu.add_command(label="Save", accelerator="Ctrl+S", command=self.save_file)
        self.file_menu.add_command(label="Save As", accelerator="Ctrl+Shift+S", command=self.save_file_as)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="Exit", accelerator="Ctrl+Q", command=self.exit)

        # Edit menu
        self.edit_menu = tk.Menu(self.menu_bar, tearoff=False)
        self.menu_bar.add_cascade(label="Edit", menu=self.edit_menu)
        self.edit_menu.add_command(label="Undo", accelerator="Ctrl+Z", command=self.undo)
        self.edit_menu.add_command(label="Redo", accelerator="Ctrl+Y", command=self.redo)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label="Cut", accelerator="Ctrl+X", command=self.cut)
        self.edit_menu.add_command(label="Copy", accelerator="Ctrl+C", command=self.copy)
        self.edit_menu.add_command(label="Paste", accelerator="Ctrl+V", command=self.paste)
        self.edit_menu.add_separator()
        self.edit_menu.add_command(label="Select All", accelerator="Ctrl+A", command=self.select_all)
        self.edit_menu.add_command(label="Find", accelerator="Ctrl+F", command=self.find)

        # Create toolbar
        self.toolbar = ttk.Frame(self.root)
        self.toolbar.pack(side=tk.TOP, fill=tk.X)

        # Toolbar buttons
        self.new_button = ttk.Button(self.toolbar, text="New", command=self.new_file)
        self.new_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.open_button = ttk.Button(self.toolbar, text="Open", command=self.open_file)
        self.open_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.save_button = ttk.Button(self.toolbar, text="Save", command=self.save_file)
        self.save_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Create text area
        self.text_area = ScrolledText(self.root, wrap=tk.WORD, undo=True)
        self.text_area.pack(expand=True, fill=tk.BOTH)

        self.root.bind("<Control-n>", lambda event: self.new_file())
        self.root.bind("<Control-o>", lambda event: self.open_file())
        self.root.bind("<Control-s>", lambda event: self.save_file())
        self.root.bind("<Control-Shift-S>", lambda event: self.save_file_as())
        self.root.bind("<Control-q>", lambda event: self.exit())
        self.root.bind("<Control-z>", lambda event: self.undo())
        self.root.bind("<Control-y>", lambda event: self.redo())
        self.root.bind("<Control-x>", lambda event: self.cut())
        self.root.bind("<Control-c>", lambda event: self.copy())
        self.root.bind("<Control-v>", lambda event: self.paste())
        self.root.bind("<Control-a>", lambda event: self.select_all())
        self.root.bind("<Control-f>", lambda event: self.find())

        self.current_file = None

    def new_file(self):
        if self.text_area.edit_modified():
            save_changes = messagebox.askyesnocancel("Save Changes", "Do you want to save the changes?")
            if save_changes is None:
                return
            elif save_changes:
                self.save_file()
        self.text_area.delete(1.0, tk.END)
        self.current_file = None
        self.root.title("Text Editor")

    def open_file(self):
        if self.text_area.edit_modified():
            save_changes = messagebox.askyesnocancel("Save Changes", "Do you want to save the changes?")
            if save_changes is None:
                return
            elif save_changes:
                self.save_file()
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            try:
                with open(file_path, "r") as file:
                    content = file.read()
                self.text_area.delete(1.0, tk.END)
                self.text_area.insert(tk.END, content)
                self.current_file = file_path
                self.root.title(f"Text Editor - {self.current_file}")
            except IOError:
                messagebox.showerror("Error", "Failed to open file.")

    def save_file(self):
        if self.current_file:
            try:
                with open(self.current_file, "w") as file:
                    content = self.text_area.get(1.0, tk.END)
                    file.write(content)
                self.text_area.edit_modified(False)
                self.root.title(f"Text Editor - {self.current_file}")
            except IOError:
                messagebox.showerror("Error", "Failed to save file.")
        else:
            self.save_file_as()

    def save_file_as(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            try:
                with open(file_path, "w") as file:
                    content = self.text_area.get(1.0, tk.END)
                    file.write(content)
                self.current_file = file_path
                self.text_area.edit_modified(False)
                self.root.title(f"Text Editor - {self.current_file}")
            except IOError:
                messagebox.showerror("Error", "Failed to save file.")

    def undo(self):
        self.text_area.edit_undo()

    def redo(self):
        self.text_area.edit_redo()

    def cut(self):
        self.text_area.event_generate("<<Cut>>")

    def copy(self):
        self.text_area.event_generate("<<Copy>>")

    def paste(self):
        self.text_area.event_generate("<<Paste>>")

    def select_all(self):
        self.text_area.tag_add(tk.SEL, "1.0", tk.END)
        self.text_area.mark_set(tk.INSERT, "1.0")
        self.text_area.see(tk.INSERT)
        return "break"

    def find(self):
        search_window = tk.Toplevel(self.root)
        search_window.title("Find")
        search_window.geometry("300x100")

        search_label = ttk.Label(search_window, text="Find:")
        search_label.pack(side=tk.LEFT, padx=5, pady=5)

        search_entry = ttk.Entry(search_window, width=30)
        search_entry.pack(side=tk.LEFT, padx=5, pady=5)
        search_entry.focus_set()

        def find_text():
            search_text = search_entry.get()
            if search_text:
                start_position = self.text_area.search(search_text, "1.0", tk.END)
                if start_position:
                    end_position = f"{start_position}+{len(search_text)}c"
                    self.text_area.tag_remove(tk.SEL, "1.0", tk.END)
                    self.text_area.tag_add(tk.SEL, start_position, end_position)
                    self.text_area.mark_set(tk.INSERT, start_position)
                    self.text_area.see(tk.INSERT)
                    search_window.destroy()
                else:
                    messagebox.showinfo("Not Found", "Text not found.")

        find_button = ttk.Button(search_window, text="Find", command=find_text)
        find_button.pack(side=tk.LEFT, padx=5, pady=5)

        cancel_button = ttk.Button(search_window, text="Cancel", command=search_window.destroy)
        cancel_button.pack(side=tk.LEFT, padx=5, pady=5)

    def exit(self):
        if self.text_area.edit_modified():
            save_changes = messagebox.askyesnocancel("Save Changes", "Do you want to save the changes?")
            if save_changes is None:
                return
            elif save_changes:
                self.save_file()
        self.root.destroy()

    def run(self):
        self.root.mainloop()


if __name__ == "__main__":
    root = tk.Tk()
    editor = TextEditor(root)
    editor.run()
